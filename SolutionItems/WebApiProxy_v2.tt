<#@ template  debug="true" hostSpecific="true" #>
<#@ include file="$(SolutionDir)SolutionItems\T4Helper.tt" #>
<#@ include file="$(SolutionDir)SolutionItems\Manager.ttinclude" #>
<#@ output extension=".ts" #>
<#@ Assembly Name="System.Windows.Forms" #>
<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.ComponentModel" #>
<#@ import namespace="System.ComponentModel.Design" #>


<#    var manager = Manager.Create(Host, GenerationEnvironment); #>

<#
	var projectItems = GetProjectItems(this);
	var elements = CodeElementsInProjectItems(projectItems);
	var classes = GetClassesImplementingInterface(elements, "IFlexApiControllerV2");
#>
/* AUTOGENERATED */

<#
	foreach(var codeClass in classes)
	{
		var fileName = String.Format("{0}.ts", codeClass.Name);
		manager.StartNewFile(fileName);
		GenerateModule(codeClass);
		 manager.EndBlock();
	}
	 manager.Process(true);
#>
<#+

	private string GetReturnType(CodeTypeRef type)
	{
		var typeName = type.AsFullName;

		if (IsAsyncType(type))
		{
			typeName = typeName.Replace("System.Threading.Tasks.Task<", "");
			typeName = typeName.Remove(typeName.Length - 1, 1);
		}

	  
		if (IsArrayType(typeName))
			return ConvertType(typeName.Split('<','>')[1]);        
		else
			return ConvertType(typeName);

	}

	private string GetReturnType(string typeNameLiteral)
	{
		var typeName = typeNameLiteral.Replace("typeof(", String.Empty);
		typeName = typeName.TrimEnd(')');

		if (IsAsyncType(typeName))
		{
			typeName = typeName.Replace("System.Threading.Tasks.Task<", "");
			typeName = typeName.Remove(typeName.Length - 1, 1);
		}

	  
		if (IsArrayType(typeName))
			return ConvertType(typeName.Split('<','>')[1]);        
		else
			return ConvertType(typeName);
	}

	private bool IsArrayType(CodeTypeRef type)
	{
		return IsArrayType(type.AsFullName);
	}

	private bool IsArrayType(string type)
	{

		return type.Contains("IEnumerable");
	}

	private bool IsAsyncType(CodeTypeRef type)
	{
		return IsAsyncType(type.AsFullName);
	}

	private bool IsAsyncType(string typeName)
	{
		return typeName.StartsWith("System.Threading.Tasks.Task");
	}

	private string ConvertType(string type)
	{

		if (type == "System.Boolean")
			return "boolean";

		if (type == "bool")
			return "boolean";

		if (type == "int")
			return "number";

		if (type == "decimal")
			return "number";

		if (type == "System.String")
			return "string";

		if (type == "String")
			return "string";

		if (type == "Aci.Flex.Portal.JsonNetResult")
			return "string";

		if (type == "System.Web.Http.IHttpActionResult")
			return "string";

		if (type == "Newtonsoft.Json.Linq.JObject")
			return "string";

		if (type == "Aci.Flex.Portal.Model.StringParameterModel")
			return "string";

		if (type == "System.Guid")
			return "string";

		return type;
	}


private void GenerateModule(CodeClass clazz)
	{
		var rpAttrib = Attributes(clazz).SingleOrDefault(a=>a.Name == "RoutePrefix");
		var routePrefix = rpAttrib.Value.Replace("\"",String.Empty);


		#>
<#+ 
		//placeholder
#>
module Flex.ApiClient.<#=clazz.Name.Replace("Controller", String.Empty) #> {
<#+
		foreach (var f in Functions(clazz))
		{
			var isPost = Attributes(f).Any(a=>a.Name.Contains("HttpPost"));
			var isGet = Attributes(f).Any(a=>a.Name.Contains("HttpGet"));
			var isDelete = Attributes(f).Any(a=>a.Name.Contains("HttpDelete"));

			if (f.Name.StartsWith("Get"))
				isGet = true;

			if (f.Name.StartsWith("Post"))
				isPost = true;

			if (f.Name.StartsWith("Delete"))
				isDelete = true;
				
			if (!isPost && !isGet && !isDelete)
				continue;

			//if (Parameters(f).Count() > 1)
			//continue;
			//
			var functionName= f.Name;
			
			var responseType = Attributes(f).SingleOrDefault(a=>a.Name == "ResponseType");

			var baseType = GetReturnType(f.Type);
			var isArray = IsArrayType(responseType.Value);

			if (responseType != null)
			{			
				baseType = GetReturnType(responseType.Value);
				isArray = IsArrayType(responseType.Value);
			}


			
			var returnType= baseType;
			var postPayload= "{}";
			var createPayload= "";
			var route = Attributes(f).SingleOrDefault(a=>a.Name == "Route");

			var queryStringText = route.Value.Replace("\"",String.Empty);

            var koMap = returnType != "string";
			
			if (isArray)            
				returnType = string.Concat("Array<",baseType,">");

			List<string> functionParameters= new List<string>();
			List<string> queryString = new List<string>();
			List<string> functionVariables= new List<string>();

			foreach (var param in Parameters(f))
			{
				if (isPost)
					createPayload = "    var payload = ko.toJSON(" + param.Name +");";

				if (queryStringText.Contains(param.Name))
				{
					var f1 = String.Format("{{{0}}}", param.Name);
					var f2 = String.Format("\" + {0} + \"", param.Name);

					queryStringText = queryStringText.Replace(f1, f2);
				}
				/*else
				{
					if (isPost)
						createPayload = "   var payload = ko.toJSON(" + param.Name +");";
				}*/

				var fType =  GetReturnType(param.Type.AsString);

				var freturnType = IsArrayType(param.Type) ? "Array<"+ fType +">" : fType;

				functionParameters.Add(
					string.Format("{0}: {1}", param.Name, freturnType));

				functionVariables.Add(
					param.Name);

			}

		 
			var resolvingType = isArray ? "resolveTo: KnockoutObservableArray<"+ baseType +">" : "resolveTo: KnockoutObservable<"+ baseType +">";

		 if (functionParameters.Count() > 0)
				resolvingType = ", " + resolvingType;

			if (isPost && !String.IsNullOrEmpty(createPayload))
			{
				postPayload = "payload";
			}
		   
			string callingFunction= "";
		   
			if (isArray)
			{
				if (isPost)
				{
					callingFunction ="Aci.Flex.Portal.ServiceHelper.PostDataArray<" + baseType + ">(targetUrl, " + postPayload + ")";
				}
				else if (isGet)
				{
					callingFunction ="Aci.Flex.Portal.ServiceHelper.GetArrayData<" + baseType + ">(targetUrl, typeHint)";
				}
			}
			else    
			{
				if (isPost)
				{
					callingFunction = "Aci.Flex.Portal.ServiceHelper.PostData<" + baseType + ">(targetUrl, " + postPayload + ")";
				}
				else if (isGet)
				{
					callingFunction = "Aci.Flex.Portal.ServiceHelper.GetData<" + baseType + ">(targetUrl, typeHint, " + koMap.ToString().ToLower() + ")";				
				}
				else if (isDelete)
				{
						callingFunction = "Aci.Flex.Portal.ServiceHelper.DeleteData<" + baseType + ">(targetUrl, typeHint, " + koMap.ToString().ToLower() + ")";				
				}
			}
				   var controllerName = clazz.Name.Replace("Controller","").ToLower();
			


			#>

export function <#=f.Name#>(<#=string.Join(", ", functionParameters.ToList()) #>): Q.Promise<<#=returnType #>>
{
	var baseUrl = $.url("portal");
	var typeHint = "<#=baseType#>";
	var targetUrl = baseUrl + "<#=routePrefix#>/<#=queryStringText#>";
<#=            createPayload#>
	return <#=callingFunction#>;
}

export function Resolve<#=f.Name#>(<#=string.Join(", ", functionParameters.ToList()) #><#=  resolvingType #>) : Q.Promise<boolean>
{
	  return <#=f.Name#>(<#= string.Join(", ", functionVariables.ToList()) #>).then	((e) => 
	  {
		resolveTo(e); 
		return true;
	}, (f) => {return false;});
}
<#+


		}
#>


}

<#+
	}
#>