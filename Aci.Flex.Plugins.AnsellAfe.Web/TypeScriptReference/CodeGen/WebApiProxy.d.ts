declare module Aci.Flex.Portal.AdminControllerClient {
}
declare module Aci.Flex.Portal.CoreControllerClient {
    function GetEventInputSources(eventIdentifier: string): Q.Promise<Array<Aci.Flex.Core.Primitives.FlexObjectIdentifier>>;
    function ResolveGetEventInputSources(eventIdentifier: string, resolveTo: KnockoutObservableArray<Aci.Flex.Core.Primitives.FlexObjectIdentifier>): Q.Promise<boolean>;
    function UpdateContent(content: Aci.Flex.DataModel.Content): Q.Promise<boolean>;
    function ResolveUpdateContent(content: Aci.Flex.DataModel.Content, resolveTo: KnockoutObservable<boolean>): Q.Promise<boolean>;
    function GetContentTypes(): Q.Promise<Array<System.Collections.Generic.KeyValuePair>>;
    function ResolveGetContentTypes(resolveTo: KnockoutObservableArray<System.Collections.Generic.KeyValuePair>): Q.Promise<boolean>;
    function GetContentLocations(typeId: number): Q.Promise<Array<Aci.Flex.DataModel.ContentLocation>>;
    function ResolveGetContentLocations(typeId: number, resolveTo: KnockoutObservableArray<Aci.Flex.DataModel.ContentLocation>): Q.Promise<boolean>;
    function GetContent(contentTypeId: number, contentLocationId: number): Q.Promise<Aci.Flex.DataModel.Content>;
    function ResolveGetContent(contentTypeId: number, contentLocationId: number, resolveTo: KnockoutObservable<Aci.Flex.DataModel.Content>): Q.Promise<boolean>;
    function GetDimensionAttributes(dimensionIdentifier: string): Q.Promise<Array<Aci.Flex.DataModel.HierarchyAttribute>>;
    function ResolveGetDimensionAttributes(dimensionIdentifier: string, resolveTo: KnockoutObservableArray<Aci.Flex.DataModel.HierarchyAttribute>): Q.Promise<boolean>;
    function Search(query: string): Q.Promise<Array<Aci.Flex.Server.ObjectModel.SearchResult>>;
    function ResolveSearch(query: string, resolveTo: KnockoutObservableArray<Aci.Flex.Server.ObjectModel.SearchResult>): Q.Promise<boolean>;
    function SearchUsers(query: string): Q.Promise<Array<Aci.Flex.DataModel.User>>;
    function ResolveSearchUsers(query: string, resolveTo: KnockoutObservableArray<Aci.Flex.DataModel.User>): Q.Promise<boolean>;
    function SearchActiveDirectory(searchRequest: Aci.Flex.Portal.Model.SearchUserModel): Q.Promise<Array<Aci.Flex.Core.PersonInfo>>;
    function ResolveSearchActiveDirectory(searchRequest: Aci.Flex.Portal.Model.SearchUserModel, resolveTo: KnockoutObservableArray<Aci.Flex.Core.PersonInfo>): Q.Promise<boolean>;
    function RebuildHierarchies(modelIdentifier: string): Q.Promise<boolean>;
    function ResolveRebuildHierarchies(modelIdentifier: string, resolveTo: KnockoutObservable<boolean>): Q.Promise<boolean>;
    function GetEntityHierarchyMappings(hierarchyRelationIdentifier: string): Q.Promise<Array<Aci.Flex.DataModel.EntityHierarchyMapping>>;
    function ResolveGetEntityHierarchyMappings(hierarchyRelationIdentifier: string, resolveTo: KnockoutObservableArray<Aci.Flex.DataModel.EntityHierarchyMapping>): Q.Promise<boolean>;
    function GetEvents(): Q.Promise<Array<Aci.Flex.Core.Primitives.FlexObjectIdentifier>>;
    function ResolveGetEvents(resolveTo: KnockoutObservableArray<Aci.Flex.Core.Primitives.FlexObjectIdentifier>): Q.Promise<boolean>;
    function GetUnArchivedEvents(modelIdentifier: string): Q.Promise<Array<Aci.Flex.Core.Primitives.FlexObjectIdentifier>>;
    function ResolveGetUnArchivedEvents(modelIdentifier: string, resolveTo: KnockoutObservableArray<Aci.Flex.Core.Primitives.FlexObjectIdentifier>): Q.Promise<boolean>;
    function GetDimensions(): Q.Promise<Array<Aci.Flex.DataModel.Dimension>>;
    function ResolveGetDimensions(resolveTo: KnockoutObservableArray<Aci.Flex.DataModel.Dimension>): Q.Promise<boolean>;
    function GetSecuredDimensions(): Q.Promise<Array<Aci.Flex.DataModel.Dimension>>;
    function ResolveGetSecuredDimensions(resolveTo: KnockoutObservableArray<Aci.Flex.DataModel.Dimension>): Q.Promise<boolean>;
    function GetInputSourceWorkflowKeys(inputSourceIdentifier: string): Q.Promise<Array<Aci.Flex.DataModel.InputSourceWorkflowKey>>;
    function ResolveGetInputSourceWorkflowKeys(inputSourceIdentifier: string, resolveTo: KnockoutObservableArray<Aci.Flex.DataModel.InputSourceWorkflowKey>): Q.Promise<boolean>;
    function GetJobHistory(jobInstanceIdentifier: string): Q.Promise<Array<Aci.Flex.DataModel.JobHistory>>;
    function ResolveGetJobHistory(jobInstanceIdentifier: string, resolveTo: KnockoutObservableArray<Aci.Flex.DataModel.JobHistory>): Q.Promise<boolean>;
    function GetJobSchedules(): Q.Promise<Array<Aci.Flex.DataModel.JobSchedule>>;
    function ResolveGetJobSchedules(resolveTo: KnockoutObservableArray<Aci.Flex.DataModel.JobSchedule>): Q.Promise<boolean>;
    function GetJobSchedule(jobScheduleIdentifier: string): Q.Promise<Aci.Flex.DataModel.JobSchedule>;
    function ResolveGetJobSchedule(jobScheduleIdentifier: string, resolveTo: KnockoutObservable<Aci.Flex.DataModel.JobSchedule>): Q.Promise<boolean>;
    function GetJobScheduleParameters(jobScheduleIdentifier: string): Q.Promise<Array<Aci.Flex.Core.ParameterDescriptor>>;
    function ResolveGetJobScheduleParameters(jobScheduleIdentifier: string, resolveTo: KnockoutObservableArray<Aci.Flex.Core.ParameterDescriptor>): Q.Promise<boolean>;
    function GetJobProcessorParameters(jobProcessorIdentifier: string): Q.Promise<Array<Aci.Flex.Core.ParameterDescriptor>>;
    function ResolveGetJobProcessorParameters(jobProcessorIdentifier: string, resolveTo: KnockoutObservableArray<Aci.Flex.Core.ParameterDescriptor>): Q.Promise<boolean>;
    function GetJobInstances(jobProcessorIdentifier: string): Q.Promise<Array<Aci.Flex.DataModel.JobInstance>>;
    function ResolveGetJobInstances(jobProcessorIdentifier: string, resolveTo: KnockoutObservableArray<Aci.Flex.DataModel.JobInstance>): Q.Promise<boolean>;
    function GetJobInstance(jobInstanceIdentifier: string): Q.Promise<Aci.Flex.DataModel.JobInstance>;
    function ResolveGetJobInstance(jobInstanceIdentifier: string, resolveTo: KnockoutObservable<Aci.Flex.DataModel.JobInstance>): Q.Promise<boolean>;
    function GetJobProcessors(): Q.Promise<Array<Aci.Flex.Core.Primitives.FlexObjectIdentifier>>;
    function ResolveGetJobProcessors(resolveTo: KnockoutObservableArray<Aci.Flex.Core.Primitives.FlexObjectIdentifier>): Q.Promise<boolean>;
    function GetInputSourceWorkflowFilters(inputSourceIdentifier: string): Q.Promise<Array<Aci.Flex.DataModel.InputSourceWorkflowFilter>>;
    function ResolveGetInputSourceWorkflowFilters(inputSourceIdentifier: string, resolveTo: KnockoutObservableArray<Aci.Flex.DataModel.InputSourceWorkflowFilter>): Q.Promise<boolean>;
    function GetInputSourceWorkflowAttributes(inputSourceIdentifier: string): Q.Promise<Array<Aci.Flex.DataModel.InputSourceWorkflowAttribute>>;
    function ResolveGetInputSourceWorkflowAttributes(inputSourceIdentifier: string, resolveTo: KnockoutObservableArray<Aci.Flex.DataModel.InputSourceWorkflowAttribute>): Q.Promise<boolean>;
    function GetInputSourceWorkflowFilterDimensionInfos(inputSourceIdentifier: string): Q.Promise<Array<Aci.Flex.Server.ObjectModel.DimensionInfo>>;
    function ResolveGetInputSourceWorkflowFilterDimensionInfos(inputSourceIdentifier: string, resolveTo: KnockoutObservableArray<Aci.Flex.Server.ObjectModel.DimensionInfo>): Q.Promise<boolean>;
    function GetInputSourceWorkflowHierarchyAttributes(inputSourceIdentifier: string): Q.Promise<Array<Aci.Flex.DataModel.HierarchyAttribute>>;
    function ResolveGetInputSourceWorkflowHierarchyAttributes(inputSourceIdentifier: string, resolveTo: KnockoutObservableArray<Aci.Flex.DataModel.HierarchyAttribute>): Q.Promise<boolean>;
    function GetInboxNotifications(): Q.Promise<Array<Aci.Flex.DataModel.InboxNotification>>;
    function ResolveGetInboxNotifications(resolveTo: KnockoutObservableArray<Aci.Flex.DataModel.InboxNotification>): Q.Promise<boolean>;
    function ScheduleJob(scheduleJobRequest: Aci.Flex.Portal.Model.ScheduleJobRequest): Q.Promise<boolean>;
    function ResolveScheduleJob(scheduleJobRequest: Aci.Flex.Portal.Model.ScheduleJobRequest, resolveTo: KnockoutObservable<boolean>): Q.Promise<boolean>;
    function SendInboxNotification(message: Aci.Flex.Portal.Model.ComposeMessageModel): Q.Promise<boolean>;
    function ResolveSendInboxNotification(message: Aci.Flex.Portal.Model.ComposeMessageModel, resolveTo: KnockoutObservable<boolean>): Q.Promise<boolean>;
    function MarkInboxNotificationRead(identifier: string): Q.Promise<boolean>;
    function ResolveMarkInboxNotificationRead(identifier: string, resolveTo: KnockoutObservable<boolean>): Q.Promise<boolean>;
    function DeleteInboxNotification(identifier: string): Q.Promise<boolean>;
    function ResolveDeleteInboxNotification(identifier: string, resolveTo: KnockoutObservable<boolean>): Q.Promise<boolean>;
    function DeleteInput(identifier: string): Q.Promise<boolean>;
    function ResolveDeleteInput(identifier: string, resolveTo: KnockoutObservable<boolean>): Q.Promise<boolean>;
    function DeleteStorageItem(storageItemIdentifier: string): Q.Promise<boolean>;
    function ResolveDeleteStorageItem(storageItemIdentifier: string, resolveTo: KnockoutObservable<boolean>): Q.Promise<boolean>;
    function GetUsers(): Q.Promise<Array<Aci.Flex.DataModel.User>>;
    function ResolveGetUsers(resolveTo: KnockoutObservableArray<Aci.Flex.DataModel.User>): Q.Promise<boolean>;
    function EnumerateOlapDatabases(serverName: string): Q.Promise<Array<Aci.Flex.Core.Primitives.FlexObjectIdentifier>>;
    function ResolveEnumerateOlapDatabases(serverName: string, resolveTo: KnockoutObservableArray<Aci.Flex.Core.Primitives.FlexObjectIdentifier>): Q.Promise<boolean>;
    function EnumerateOlapCubes(serverName: string, databaseName: string): Q.Promise<Array<Aci.Flex.Core.Primitives.FlexObjectIdentifier>>;
    function ResolveEnumerateOlapCubes(serverName: string, databaseName: string, resolveTo: KnockoutObservableArray<Aci.Flex.Core.Primitives.FlexObjectIdentifier>): Q.Promise<boolean>;
    function EnumerateOlapDimensions(serverName: string, databaseName: string, cubeId: string): Q.Promise<Array<Aci.Flex.Core.Primitives.FlexObjectIdentifier>>;
    function ResolveEnumerateOlapDimensions(serverName: string, databaseName: string, cubeId: string, resolveTo: KnockoutObservableArray<Aci.Flex.Core.Primitives.FlexObjectIdentifier>): Q.Promise<boolean>;
    function GetActiveUsers(): Q.Promise<Array<Aci.Flex.DataModel.User>>;
    function ResolveGetActiveUsers(resolveTo: KnockoutObservableArray<Aci.Flex.DataModel.User>): Q.Promise<boolean>;
    function GetInactiveUsers(): Q.Promise<Array<Aci.Flex.DataModel.User>>;
    function ResolveGetInactiveUsers(resolveTo: KnockoutObservableArray<Aci.Flex.DataModel.User>): Q.Promise<boolean>;
    function GetUserLicense(modelIdentifier: string, userIdentifier: string): Q.Promise<Aci.Flex.DataModel.LicenseAssignment>;
    function ResolveGetUserLicense(modelIdentifier: string, userIdentifier: string, resolveTo: KnockoutObservable<Aci.Flex.DataModel.LicenseAssignment>): Q.Promise<boolean>;
    function GetUser(userIdentifier: string): Q.Promise<Aci.Flex.DataModel.User>;
    function ResolveGetUser(userIdentifier: string, resolveTo: KnockoutObservable<Aci.Flex.DataModel.User>): Q.Promise<boolean>;
    function GetAssignedHierarchyRoles(userIdentifier: string): Q.Promise<Array<Aci.Flex.Server.ObjectModel.UserHierarchyRoleInfo>>;
    function ResolveGetAssignedHierarchyRoles(userIdentifier: string, resolveTo: KnockoutObservableArray<Aci.Flex.Server.ObjectModel.UserHierarchyRoleInfo>): Q.Promise<boolean>;
    function GetAssignedModelRoles(userIdentifier: string): Q.Promise<Array<Aci.Flex.DataModel.ModelRole>>;
    function ResolveGetAssignedModelRoles(userIdentifier: string, resolveTo: KnockoutObservableArray<Aci.Flex.DataModel.ModelRole>): Q.Promise<boolean>;
    function GetHierarchies(dimensionIdentifier: string, keyTerminatingOnly: boolean): Q.Promise<Array<Aci.Flex.DataModel.Hierarchy>>;
    function ResolveGetHierarchies(dimensionIdentifier: string, keyTerminatingOnly: boolean, resolveTo: KnockoutObservableArray<Aci.Flex.DataModel.Hierarchy>): Q.Promise<boolean>;
    function GetSecuredHierarchies(): Q.Promise<Array<Aci.Flex.DataModel.Hierarchy>>;
    function ResolveGetSecuredHierarchies(resolveTo: KnockoutObservableArray<Aci.Flex.DataModel.Hierarchy>): Q.Promise<boolean>;
    function GetHierarchyRoles(): Q.Promise<Array<Aci.Flex.DataModel.ModelRole>>;
    function ResolveGetHierarchyRoles(resolveTo: KnockoutObservableArray<Aci.Flex.DataModel.ModelRole>): Q.Promise<boolean>;
    function GetStaticRoles(): Q.Promise<Array<Aci.Flex.DataModel.ModelRole>>;
    function ResolveGetStaticRoles(resolveTo: KnockoutObservableArray<Aci.Flex.DataModel.ModelRole>): Q.Promise<boolean>;
    function GetStorageItem(storageItemIdentifier: string): Q.Promise<Aci.Flex.DataModel.StorageItem>;
    function ResolveGetStorageItem(storageItemIdentifier: string, resolveTo: KnockoutObservable<Aci.Flex.DataModel.StorageItem>): Q.Promise<boolean>;
    function GetStorageProviderParameters(key: number): Q.Promise<Array<Aci.Flex.Core.ParameterDescriptor>>;
    function ResolveGetStorageProviderParameters(key: number, resolveTo: KnockoutObservableArray<Aci.Flex.Core.ParameterDescriptor>): Q.Promise<boolean>;
    function UpdateStorageProvider(request: Aci.Flex.Portal.Model.UpdateStorageProviderRequest): Q.Promise<boolean>;
    function ResolveUpdateStorageProvider(request: Aci.Flex.Portal.Model.UpdateStorageProviderRequest, resolveTo: KnockoutObservable<boolean>): Q.Promise<boolean>;
    function GetStorageProviders(): Q.Promise<Array<Aci.Flex.DataModel.StorageProvider>>;
    function ResolveGetStorageProviders(resolveTo: KnockoutObservableArray<Aci.Flex.DataModel.StorageProvider>): Q.Promise<boolean>;
    function UpdateUser(userInfo: Aci.Flex.Portal.Model.UserInfo): Q.Promise<boolean>;
    function ResolveUpdateUser(userInfo: Aci.Flex.Portal.Model.UserInfo, resolveTo: KnockoutObservable<boolean>): Q.Promise<boolean>;
    function GetModels(): Q.Promise<Array<Aci.Flex.DataModel.Model>>;
    function ResolveGetModels(resolveTo: KnockoutObservableArray<Aci.Flex.DataModel.Model>): Q.Promise<boolean>;
    function GetModelTypes(): Q.Promise<Array<Aci.Flex.Core.Primitives.FlexObjectIdentifier>>;
    function ResolveGetModelTypes(resolveTo: KnockoutObservableArray<Aci.Flex.Core.Primitives.FlexObjectIdentifier>): Q.Promise<boolean>;
    function ValidateLicenseStorageItem(storageItemIdentifier: string): Q.Promise<Aci.Flex.DataModel.ModelLicense>;
    function ResolveValidateLicenseStorageItem(storageItemIdentifier: string, resolveTo: KnockoutObservable<Aci.Flex.DataModel.ModelLicense>): Q.Promise<boolean>;
    function GetModelWorkflows(): Q.Promise<Array<Aci.Flex.DataModel.ModelWorkflow>>;
    function ResolveGetModelWorkflows(resolveTo: KnockoutObservableArray<Aci.Flex.DataModel.ModelWorkflow>): Q.Promise<boolean>;
    function GetModelLicences(modelIdentifier: string, includeInactive: boolean): Q.Promise<Array<Aci.Flex.DataModel.ModelLicense>>;
    function ResolveGetModelLicences(modelIdentifier: string, includeInactive: boolean, resolveTo: KnockoutObservableArray<Aci.Flex.DataModel.ModelLicense>): Q.Promise<boolean>;
    function CreateStorageItems(): Q.Promise<Array<Aci.Flex.DataModel.StorageItem>>;
    function ResolveCreateStorageItems(resolveTo: KnockoutObservableArray<Aci.Flex.DataModel.StorageItem>): Q.Promise<boolean>;
    function CreateWorkflowStorageItems(): Q.Promise<Array<Aci.Flex.DataModel.StorageItem>>;
    function ResolveCreateWorkflowStorageItems(resolveTo: KnockoutObservableArray<Aci.Flex.DataModel.StorageItem>): Q.Promise<boolean>;
    function UpdateInputSource(inputSourceInfo: Aci.Flex.Portal.Model.InputSourceInfo): Q.Promise<boolean>;
    function ResolveUpdateInputSource(inputSourceInfo: Aci.Flex.Portal.Model.InputSourceInfo, resolveTo: KnockoutObservable<boolean>): Q.Promise<boolean>;
    function UpdateModelWorkflow(modelWorkflowInfo: Aci.Flex.Portal.Model.ModelWorkflowInfo): Q.Promise<boolean>;
    function ResolveUpdateModelWorkflow(modelWorkflowInfo: Aci.Flex.Portal.Model.ModelWorkflowInfo, resolveTo: KnockoutObservable<boolean>): Q.Promise<boolean>;
    function CreateUser(userInfo: Aci.Flex.Portal.Model.UserInfo): Q.Promise<boolean>;
    function ResolveCreateUser(userInfo: Aci.Flex.Portal.Model.UserInfo, resolveTo: KnockoutObservable<boolean>): Q.Promise<boolean>;
    function ActivateUser(userIdentifier: string): Q.Promise<boolean>;
    function ResolveActivateUser(userIdentifier: string, resolveTo: KnockoutObservable<boolean>): Q.Promise<boolean>;
    function ImportLicense(storageItemIdentifier: string): Q.Promise<boolean>;
    function ResolveImportLicense(storageItemIdentifier: string, resolveTo: KnockoutObservable<boolean>): Q.Promise<boolean>;
    function ImportModel(modelIdentifier: string, serverName: string, databaseName: string, cubeId: string): Q.Promise<boolean>;
    function ResolveImportModel(modelIdentifier: string, serverName: string, databaseName: string, cubeId: string, resolveTo: KnockoutObservable<boolean>): Q.Promise<boolean>;
    function DeactivateUser(userIdentifier: string): Q.Promise<boolean>;
    function ResolveDeactivateUser(userIdentifier: string, resolveTo: KnockoutObservable<boolean>): Q.Promise<boolean>;
    function CreateInputSource(inputSource: Aci.Flex.DataModel.InputSource): Q.Promise<boolean>;
    function ResolveCreateInputSource(inputSource: Aci.Flex.DataModel.InputSource, resolveTo: KnockoutObservable<boolean>): Q.Promise<boolean>;
    function CreateInput(input: Aci.Flex.DataModel.Input): Q.Promise<boolean>;
    function ResolveCreateInput(input: Aci.Flex.DataModel.Input, resolveTo: KnockoutObservable<boolean>): Q.Promise<boolean>;
    function CreateModel(model: Aci.Flex.DataModel.Model): Q.Promise<boolean>;
    function ResolveCreateModel(model: Aci.Flex.DataModel.Model, resolveTo: KnockoutObservable<boolean>): Q.Promise<boolean>;
    function UpdateInput(input: Aci.Flex.DataModel.Input): Q.Promise<boolean>;
    function ResolveUpdateInput(input: Aci.Flex.DataModel.Input, resolveTo: KnockoutObservable<boolean>): Q.Promise<boolean>;
    function UpdateDimension(dimension: Aci.Flex.DataModel.Dimension): Q.Promise<boolean>;
    function ResolveUpdateDimension(dimension: Aci.Flex.DataModel.Dimension, resolveTo: KnockoutObservable<boolean>): Q.Promise<boolean>;
    function UpdateHierarchy(hierarchy: Aci.Flex.DataModel.Hierarchy): Q.Promise<boolean>;
    function ResolveUpdateHierarchy(hierarchy: Aci.Flex.DataModel.Hierarchy, resolveTo: KnockoutObservable<boolean>): Q.Promise<boolean>;
    function GetWorkflowStatus(request: Aci.Flex.Portal.Model.WorkflowStatusRequest): Q.Promise<Array<Aci.Flex.Server.ObjectModel.WorkflowStatus>>;
    function ResolveGetWorkflowStatus(request: Aci.Flex.Portal.Model.WorkflowStatusRequest, resolveTo: KnockoutObservableArray<Aci.Flex.Server.ObjectModel.WorkflowStatus>): Q.Promise<boolean>;
    function GetWorkflowHistory(workflowInstanceId: string): Q.Promise<Array<Aci.Flex.Server.ObjectModel.WorkflowHistory>>;
    function ResolveGetWorkflowHistory(workflowInstanceId: string, resolveTo: KnockoutObservableArray<Aci.Flex.Server.ObjectModel.WorkflowHistory>): Q.Promise<boolean>;
    function GetWorkflowStorageItems(workflowInstanceId: string): Q.Promise<Array<Aci.Flex.DataModel.StorageItem>>;
    function ResolveGetWorkflowStorageItems(workflowInstanceId: string, resolveTo: KnockoutObservableArray<Aci.Flex.DataModel.StorageItem>): Q.Promise<boolean>;
    function ProcessBookmark(request: Aci.Flex.Portal.Model.ProcessBookmarkRequest): Q.Promise<boolean>;
    function ResolveProcessBookmark(request: Aci.Flex.Portal.Model.ProcessBookmarkRequest, resolveTo: KnockoutObservable<boolean>): Q.Promise<boolean>;
    function GetInputSources(): Q.Promise<Array<Aci.Flex.DataModel.InputSource>>;
    function ResolveGetInputSources(resolveTo: KnockoutObservableArray<Aci.Flex.DataModel.InputSource>): Q.Promise<boolean>;
    function GetInputs(inputSourceIdentifier: string): Q.Promise<Array<Aci.Flex.DataModel.Input>>;
    function ResolveGetInputs(inputSourceIdentifier: string, resolveTo: KnockoutObservableArray<Aci.Flex.DataModel.Input>): Q.Promise<boolean>;
    function GetWorkflows(): Q.Promise<Array<Aci.Flex.Core.Primitives.FlexObjectIdentifier>>;
    function ResolveGetWorkflows(resolveTo: KnockoutObservableArray<Aci.Flex.Core.Primitives.FlexObjectIdentifier>): Q.Promise<boolean>;
    function GetWorkflowRoles(modelWorkflowIdentifier: string): Q.Promise<Array<System.Collections.Generic.KeyValuePair>>;
    function ResolveGetWorkflowRoles(modelWorkflowIdentifier: string, resolveTo: KnockoutObservableArray<System.Collections.Generic.KeyValuePair>): Q.Promise<boolean>;
    function GetWorkflowRoleMaps(modelWorkflowIdentifier: string): Q.Promise<Array<Aci.Flex.DataModel.WorkflowRoleMap>>;
    function ResolveGetWorkflowRoleMaps(modelWorkflowIdentifier: string, resolveTo: KnockoutObservableArray<Aci.Flex.DataModel.WorkflowRoleMap>): Q.Promise<boolean>;
    function UpdateEntityHierarchyMappings(mappingInfo: Aci.Flex.Portal.Model.EntityHierarchyMappingInfo): Q.Promise<boolean>;
    function ResolveUpdateEntityHierarchyMappings(mappingInfo: Aci.Flex.Portal.Model.EntityHierarchyMappingInfo, resolveTo: KnockoutObservable<boolean>): Q.Promise<boolean>;
    function GetInputSourceParameters(blah: string): Q.Promise<Array<Aci.Flex.Server.ObjectModel.InputParameter>>;
    function ResolveGetInputSourceParameters(blah: string, resolveTo: KnockoutObservableArray<Aci.Flex.Server.ObjectModel.InputParameter>): Q.Promise<boolean>;
    function GetHierarchyRelations(): Q.Promise<Array<Aci.Flex.DataModel.HierarchyRelation>>;
    function ResolveGetHierarchyRelations(resolveTo: KnockoutObservableArray<Aci.Flex.DataModel.HierarchyRelation>): Q.Promise<boolean>;
    function GetHierarchyMembers(hierarchyIdentifier: string): Q.Promise<Array<Aci.Flex.DataModel.EntityHierarchyStatic>>;
    function ResolveGetHierarchyMembers(hierarchyIdentifier: string, resolveTo: KnockoutObservableArray<Aci.Flex.DataModel.EntityHierarchyStatic>): Q.Promise<boolean>;
    function GetUserDashboard(): Q.Promise<string>;
    function ResolveGetUserDashboard(resolveTo: KnockoutObservable<string>): Q.Promise<boolean>;
    function SaveUserDashboard(dashboard: string): Q.Promise<boolean>;
    function ResolveSaveUserDashboard(dashboard: string, resolveTo: KnockoutObservable<boolean>): Q.Promise<boolean>;
}
declare module Aci.Flex.Portal.DataControllerClient {
    function GetWorkflowMetrics(): Q.Promise<string>;
    function ResolveGetWorkflowMetrics(resolveTo: KnockoutObservable<string>): Q.Promise<boolean>;
    function GetDashboardData(query: Aci.Flex.Server.ObjectModel.DashboardDataQuery): Q.Promise<string>;
    function ResolveGetDashboardData(query: Aci.Flex.Server.ObjectModel.DashboardDataQuery, resolveTo: KnockoutObservable<string>): Q.Promise<boolean>;
}
declare module Aci.Flex.Portal.ReportControllerClient {
    function GetReportServerPlugins(): Q.Promise<Array<System.Collections.Generic.KeyValuePair>>;
    function ResolveGetReportServerPlugins(resolveTo: KnockoutObservableArray<System.Collections.Generic.KeyValuePair>): Q.Promise<boolean>;
    function GetReportServers(): Q.Promise<Array<Aci.Flex.DataModel.ReportServer>>;
    function ResolveGetReportServers(resolveTo: KnockoutObservableArray<Aci.Flex.DataModel.ReportServer>): Q.Promise<boolean>;
    function DeleteReportServer(reportServerIdentifier: string): Q.Promise<boolean>;
    function ResolveDeleteReportServer(reportServerIdentifier: string, resolveTo: KnockoutObservable<boolean>): Q.Promise<boolean>;
    function DeleteReport(reportIdentifier: string): Q.Promise<boolean>;
    function ResolveDeleteReport(reportIdentifier: string, resolveTo: KnockoutObservable<boolean>): Q.Promise<boolean>;
    function CreateReport(report: Aci.Flex.Portal.Model.ReportDefinitionModel): Q.Promise<boolean>;
    function ResolveCreateReport(report: Aci.Flex.Portal.Model.ReportDefinitionModel, resolveTo: KnockoutObservable<boolean>): Q.Promise<boolean>;
    function UpdateReport(report: Aci.Flex.Portal.Model.ReportDefinitionModel): Q.Promise<boolean>;
    function ResolveUpdateReport(report: Aci.Flex.Portal.Model.ReportDefinitionModel, resolveTo: KnockoutObservable<boolean>): Q.Promise<boolean>;
    function GetModelReports(includeHidden: boolean): Q.Promise<Array<Aci.Flex.DataModel.ReportDefinition>>;
    function ResolveGetModelReports(includeHidden: boolean, resolveTo: KnockoutObservableArray<Aci.Flex.DataModel.ReportDefinition>): Q.Promise<boolean>;
    function GetReportDefinition(reportIdentifier: string): Q.Promise<Aci.Flex.DataModel.ReportDefinition>;
    function ResolveGetReportDefinition(reportIdentifier: string, resolveTo: KnockoutObservable<Aci.Flex.DataModel.ReportDefinition>): Q.Promise<boolean>;
    function GetReportParameters(reportIdentifier: string): Q.Promise<Array<Aci.Flex.DataModel.ReportParameter>>;
    function ResolveGetReportParameters(reportIdentifier: string, resolveTo: KnockoutObservableArray<Aci.Flex.DataModel.ReportParameter>): Q.Promise<boolean>;
    function CreateReportServer(reportServer: Aci.Flex.DataModel.ReportServer): Q.Promise<boolean>;
    function ResolveCreateReportServer(reportServer: Aci.Flex.DataModel.ReportServer, resolveTo: KnockoutObservable<boolean>): Q.Promise<boolean>;
    function GetReportUri(reportIdentifier: string): Q.Promise<string>;
    function ResolveGetReportUri(reportIdentifier: string, resolveTo: KnockoutObservable<string>): Q.Promise<boolean>;
}
declare module Aci.Flex.Portal.ModelNavigationControllerClient {
    function ChangeModel(id: string): Q.Promise<boolean>;
    function ResolveChangeModel(id: string, resolveTo: KnockoutObservable<boolean>): Q.Promise<boolean>;
}
declare module Aci.Flex.Portal.NotificationControllerClient {
    function UnreadInboxMessageCount(): Q.Promise<string>;
    function ResolveUnreadInboxMessageCount(resolveTo: KnockoutObservable<string>): Q.Promise<boolean>;
}
